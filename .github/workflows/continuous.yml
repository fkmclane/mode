name: Continuous Builds

on:
  push:
    branches:
      - master

jobs:
  linux:
    name: Linux Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: |
          .ci/linux.sh
      - uses: actions/upload-artifact@v2
        with:
          name: mode-linux
          path: mode.AppImage

  macos:
    name: macOS Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: |
          .ci/macos.sh
      - uses: actions/upload-artifact@v2
        with:
          name: mode-macos
          path: mode.zip

  windows:
    name: Windows Build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - shell: powershell
        run: |
          .ci/windows.ps1
      - uses: actions/upload-artifact@v2
        with:
          name: mode-windows
          path: mode.zip

  upload:
    name: Upload Release
    needs: [linux, macos, windows]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: mode-linux
          path: mode-linux
      - uses: actions/download-artifact@v2
        with:
          name: mode-macos
          path: mode-macos
      - uses: actions/download-artifact@v2
        with:
          name: mode-windows
          path: mode-windows
      - uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const tag = 'continuous';

            const name = 'Continuous Builds';
            const body = 'Continuous builds are freshly baked from the master branch. Unless otherwise specified, all builds are for x86_64.';
            const prerelease = true;

            const assets = {
              'mode-linux.AppImage': './mode-linux/mode.AppImage',
              'mode-macos.zip': './mode-macos/mode.zip',
              'mode-windows.zip': './mode-windows/mode.zip',
            };

            const ref = await github.git.getRef({
              ...context.repo,
              ref: 'tags/' + tag,
            })
            .catch((err) => {
              if (err.status !== 404)
                throw err;

              return github.git.createRef({
                ...context.repo,
                ref: 'refs/tags/' + tag,
                sha: context.sha,
              });
            });

            if (ref.status !== 201) {
              await github.git.updateRef({
                ...context.repo,
                ref: 'tags/' + tag,
                sha: context.sha,
                force: true,
              });
            }

            await github.repos.getReleaseByTag({
              ...context.repo,
              tag: tag,
            })
            .then((rel) => {
              return github.repos.deleteRelease({
                ...context.repo,
                release_id: rel.data.id,
              });
            })
            .catch((err) => {
              if (err.status !== 404)
                throw err;

              return null;
            });

            const rel = await github.repos.createRelease({
              ...context.repo,
              tag_name: tag,
              name: name,
              body: body,
              prerelease: prerelease,
            });

            for (let [asset_name, asset_path] of Object.entries(assets)) {
              await github.repos.uploadReleaseAsset({
                ...context.repo,
                release_id: rel.data.id,
                name: asset_name,
                data: fs.readFileSync(asset_path),
              });
            }
